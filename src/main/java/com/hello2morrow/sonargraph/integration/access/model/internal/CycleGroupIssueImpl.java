/*
 * Sonargraph Integration Access
 * Copyright (C) 2016-2021 hello2morrow GmbH
 * mailto: support AT hello2morrow DOT com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.hello2morrow.sonargraph.integration.access.model.internal;

import java.util.Collections;
import java.util.List;

import com.hello2morrow.sonargraph.integration.access.foundation.Utility;
import com.hello2morrow.sonargraph.integration.access.model.IAnalyzer;
import com.hello2morrow.sonargraph.integration.access.model.ICycleGroupIssue;
import com.hello2morrow.sonargraph.integration.access.model.IIssueProvider;
import com.hello2morrow.sonargraph.integration.access.model.IIssueType;
import com.hello2morrow.sonargraph.integration.access.model.INamedElement;
import com.hello2morrow.sonargraph.integration.access.model.Severity;

public final class CycleGroupIssueImpl extends MultiNamedElementIssueImpl implements ICycleGroupIssue
{
    private static final long serialVersionUID = 6456637507787653398L;
    private final IAnalyzer analyzer;
    private final List<INamedElement> cyclicElements;
    private final int componentDependenciesToRemove;
    private final int structuralDebtIndex;
    private final int parserDependenciesToRemove;
    private final INamedElement scope;
    private final Severity severity;

    public CycleGroupIssueImpl(final String name, final String presentationName, final String description, final IIssueType issueType,
            final Severity severity, final IIssueProvider provider, final IAnalyzer analyzer, final List<INamedElement> cyclicElements,
            final int structuralDebtIndex, final int componentDependenciesToRemove, final int parserDependenciesToRemove, final INamedElement scope)
    {
        super(name, presentationName, description, issueType, provider);
        assert analyzer != null : "Parameter 'analyzer' of method 'CycleGroup' must not be null";
        assert cyclicElements != null && !cyclicElements.isEmpty() : "Parameter 'cyclicElements' of method 'CycleGroupIssueImpl' must not be empty";
        assert severity != null : "Parameter 'severity' of method 'CycleGroupIssueImpl' must not be null";

        this.analyzer = analyzer;
        this.cyclicElements = cyclicElements;
        this.structuralDebtIndex = structuralDebtIndex;
        this.componentDependenciesToRemove = componentDependenciesToRemove;
        this.parserDependenciesToRemove = parserDependenciesToRemove;
        this.scope = scope;
        this.severity = severity;
    }

    @Override
    public Severity getSeverity()
    {
        return severity;
    }

    @Override
    public List<INamedElement> getNamedElements()
    {
        return Collections.unmodifiableList(cyclicElements);
    }

    @Override
    public List<INamedElement> getAffectedNamedElements()
    {
        return Collections.unmodifiableList(cyclicElements);
    }

    @Override
    public IAnalyzer getAnalyzer()
    {
        return analyzer;
    }

    @Override
    public int getStructuralDebtIndex()
    {
        return structuralDebtIndex;
    }

    @Override
    public int getComponentDependenciesToRemove()
    {
        return componentDependenciesToRemove;
    }

    @Override
    public int getParserDependenciesToRemove()
    {
        return parserDependenciesToRemove;
    }

    @Override
    public INamedElement getScope()
    {
        return scope;
    }

    @Override
    public String toString()
    {
        final StringBuilder builder = new StringBuilder(getIssueType().toString());
        builder.append(", generated by ").append(getIssueProvider().toString()).append(": ").append(getDescription()).append(", resolved '")
                .append(hasResolution()).append("'");
        cyclicElements.forEach(ce -> builder.append("\n").append(Utility.INDENTATION).append(Utility.INDENTATION).append(Utility.INDENTATION)
                .append("Involved element: ").append(ce.getPresentationName()));
        return builder.toString();
    }
}